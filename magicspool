#!/usr/bin/env perl
#
# MagicSpool sends a Base64-encoded PDF over TCP to a remote spool server.
# (c) 2008 Diego Javier Coppari â€“ LGLP License
#

use strict;
use warnings;
use IO::Socket;
use MIME::Base64;

# Print usage help
sub show_help {
    print <<"EOF";
Usage: $0 <file_to_send> [ip_address] [port]

Sends a file to a MagicSpool server using TCP and Base64-encoded XML.

Arguments:
  file_to_send   Full path to the file to send
  ip_address     Optional. Defaults to SSH_CLIENT IP
  port           Optional. Defaults to 6123

Example:
  magicspool /tmp/invoice.pdf 192.168.1.100 6123

This script is part of the MagicSpool solution by Diego J. Coppari.
Licensed under the terms of the LGPL.
(c) 2008-2024 Diego Javier Coppari

Contact:
   https://github.com/dcoppari

EOF
    exit 1;
}

# Extract IP from SSH_CLIENT env variable
sub extract_ssh_ip {
    my $ssh = $ENV{'SSH_CLIENT'} || return undef;
    return substr($ssh, 0, index($ssh, " "));
}

# Validate if input is a valid IPv4 address
sub is_valid_ip {
    my $ip = shift;
    return $ip =~ /^(\d{1,3}\.){3}\d{1,3}$/;
}

# MAIN EXECUTION
my ($file, $host, $port) = @ARGV;

show_help() unless defined $file;
$host ||= extract_ssh_ip() or die "Error: No IP provided and SSH_CLIENT is not set.\n";
$port ||= 6123;

# Validations
die "Error: File '$file' not found or is empty.\n" unless -s $file;
die "Error: '$host' is not a valid IPv4 address.\n" unless is_valid_ip($host);

# File metadata
my $file_size = -s $file;
my ($file_name) = ($file =~ /([^\/\\]+)$/);

# Establish TCP connection
my $sock = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => 'tcp',
    Timeout  => 10,
) or die "Error: Unable to connect to $host:$port\n";

$sock->autoflush(1);

# XML Header
print $sock '<?xml version="1.0" encoding="UTF-8"?>';
print $sock "<document>";
print $sock "<ver>1.0</ver>";
print $sock "<name>$file_name</name>";
print $sock "<size>$file_size</size>";
print $sock "<code><![CDATA[";

# Stream file content encoded in base64
open(my $fh, '<', $file) or die "Error: Cannot open file '$file': $!\n";
my $buffer;
while (read($fh, $buffer, 60 * 57)) {
    print $sock encode_base64($buffer);
}
close($fh);

# Finalize XML
print $sock "]]></code>";
print $sock "</document>";

close($sock);
exit 0;
